generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id @default(cuid())
  email               String             @unique
  name                String
  isAdmin             Boolean            @default(false)
  password            Password?
  application         Application?
  company             Company?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  catalogItemsCreated CatalogItem[]      @relation("catalogItemsCreated")
  catalogItemsUpdated CatalogItem[]      @relation("catalogItemsUpdated")
  OrderRequestItem    OrderRequestItem[]
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Application {
  id          String            @id @default(cuid())
  payloadJson Json
  type        CompanyType
  status      ApplicationStatus @default(PENDING)
  userId      String            @unique
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Company {
  id            String          @id @default(cuid())
  active        Boolean         @default(false)
  type          CompanyType
  name          String
  ownerName     String
  phone         String?
  email         String?
  address       String?
  einTin        String
  bio           String?
  imageKey      String?
  socialSites   SocialSite[]
  ownerId       String          @unique
  owner         User            @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  inventoryList InventoryList[]
}

model SocialSite {
  id        String         @id @default(cuid())
  type      SocialSiteType
  url       String
  companyId String
  company   Company        @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([companyId, type])
}

model Address {
  id          String        @id @default(cuid())
  street      String
  city        String
  state       String
  zip         String
  country     String        @default("US")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  marketEvent MarketEvent[]
}

model MarketEvent {
  id               String             @id @default(cuid())
  marketDate       DateTime
  addressId        String
  address          Address            @relation(fields: [addressId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  isCanceled       Boolean            @default(false)
  notes            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  inventoryList    InventoryList[]
  OrderRequestItem OrderRequestItem[]
}

model CatalogItem {
  id               String             @id @default(cuid())
  parentId         String?
  parent           CatalogItem?       @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  children         CatalogItem[]      @relation("ParentChild")
  name             String
  description      String?
  createdById      String?
  createdBy        User?              @relation("catalogItemsCreated", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: Cascade)
  lastUpdatedById  String?
  lastUpdatedBy    User?              @relation("catalogItemsUpdated", fields: [lastUpdatedById], references: [id], onDelete: SetNull, onUpdate: Cascade)
  basePrice        Decimal?           @db.Decimal(13, 3)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  images           CatalogItemImage[]
  thumbnail        String?
  tags             CatalogItemTag[]
  inventoryRecords InventoryRecord[]
}

model CatalogItemImage {
  id            String      @id @default(cuid())
  imageKey      String
  catalogItemId String
  catalogItem   CatalogItem @relation(fields: [catalogItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdById   String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model CatalogTag {
  id             String           @id @default(cuid())
  name           String           @unique
  CatalogItemTag CatalogItemTag[]
}

model CatalogItemTag {
  tagId  String
  tag    CatalogTag  @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId String
  item   CatalogItem @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([tagId, itemId])
}

model InventoryList {
  id               String              @id @default(cuid())
  marketEventId    String
  marketEvent      MarketEvent         @relation(fields: [marketEventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId        String
  company          Company             @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  inventoryRecords InventoryRecord[]
  status           InventoryListStatus @default(PENDING)

  @@unique([marketEventId, companyId])
}

model InventoryRecord {
  id               String             @id @default(cuid())
  inventoryListId  String
  inventoryList    InventoryList      @relation(fields: [inventoryListId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  catalogItemId    String
  catalogItem      CatalogItem        @relation(fields: [catalogItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quantity         Int // Number of stems commited from the grower
  available        Int // Number of stems available for sale
  priceEach        Decimal            @db.Decimal(13, 3)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  OrderRequestItem OrderRequestItem[]

  @@unique([inventoryListId, catalogItemId])
}

model OrderRequestItem {
  id                String          @id @default(cuid())
  userId            String
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  marketEventId     String
  marketEvent       MarketEvent     @relation(fields: [marketEventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inventoryRecordId String
  inventoryRecord   InventoryRecord @relation(fields: [inventoryRecordId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quantity          Int // Number of stems requested
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique([userId, marketEventId, inventoryRecordId])
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CompanyType {
  FLORIST
  GROWER
}

enum InventoryListStatus {
  PENDING
  APPROVED
}

enum SocialSiteType {
  FACEBOOK
  TWITTER
  INSTAGRAM
  LINKEDIN
  WEBSITE
}
